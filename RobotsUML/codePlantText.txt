@startuml

title ROBOT

abstract Personaje{
- Vec2D posicion
+ moverse(Vec2D posicion)
}


class Jugador

class Robot{
+ perseguirPosicion(Vec2D)
}

Personaje <|.. Jugador
Personaje <|.. Robot


class RobotX2
class RobotX1

Robot <|-- RobotX1
Robot <|-- RobotX2


class Tablero{
- Int largoX
- Int largoY
- Jugador player
- List<Robot> robots
- List<Vec2D> fuegos

- crearRobots(Int,Int)
- colisionarRobots()
- incendiarRobots(Robot)
- matarRobots(Robot,Robot): Boolean
+ starPoint(Int nivel)
+ moverJugador(Vec2D)
+ posJug(): Vec2D
+ perseguirJugador()
+ win(): Boolean
+ lose(): Boolean

}

Tablero*-->Robot
Tablero*-->Jugador

EstadoDeJuego *--> Tablero

class EstadoDeJuego{
- Int score
- Tablero tablero
- Int cantSafeTeleport
- Int nivel
+ actualizarEstadoJuego()
+ startGame()
+ reset(Int, Int)
+ gameOver()
+ nextLevel()
+ realizarJugada(Vec2D)
+ update(Accion)
+ usarTpSafe()
}

EstadoDeJuego-->ListenerGameOver
EstadoDeJuego-->ListenerLevelUp
EstadoDeJuego-->ListenerTPSafe
EstadoDeJuego..>Action

interface ListenerGameOver{
+ gameOver()
}

interface ListenerLevelUp{
+ levelUp(String, String, String)
}

interface ListenerTPSafe{
+ tpUsado(String)
}

interface Action{
aplicar(GameState)
}


class AccionTeleport{
- Vec2D newPosition

}
class AccionMovimiento{
- Vec2D direction
}

class AccionStartGame{
- Int tamX
- Int tamY
}

class AccionTeleportRandom{
}

Action <|..AccionStartGame
Action<|.. AccionTeleportRandom
Action<|..AccionTeleport
Action<|..AccionMovimiento





@enduml
